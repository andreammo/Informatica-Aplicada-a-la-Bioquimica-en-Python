
############################## PRÃCTICA 6 #####################################
# EJERCICIO 1.1
# Descargamos la secuencia del Megavirus Chiliensis con cÃ³digo MG547 y la 
# guardamos en la variable old_dna

from Bio import SeqIO ##Cargamos el paquete que nos permite leer los archivos
from Bio.Seq import Seq

old_dna = SeqIO.read("mg_virus.fasta", "fasta")

# Escribimos una funciÃ³n que a partir de una secuencia nos proporcione su 
# modelo multinomial. Esta funciÃ³n se va a llamar ModeloMultinomial. 


def ModeloMultinomial(seq):
    ModMul = []
    pa = seq.count('A')/len(seq)
    pc = seq.count('C')/len(seq)
    pg = seq.count('G')/len(seq)
    pt = seq.count('T')/len(seq)
    
    ModMul.append([pa,pc,pg,pt])
    
    return(['pa','pc','pg', 'pt'], ModMul)

# Probamos la funciÃ³n la secuencia old_dna:
ModeloMultinomial(old_dna.seq)
prob_old = ModMul[0]
# Ahora escibimos una secuencia con las probabilidades obtenidas en ModMul. 


import numpy as np

words = ['A','C','G','T']
sample = np.random.choice(words, size = len(old_dna), replace = True, 
                          p = [0.37,0.12,0.13,0.38])

new_dna = list(sample)

ModMul = []
ModeloMultinomial(new_dna)
prob_new = ModMul[0]
# Y para visualizar mejor los resultados, vamos a representarlos en dos 
# grÃ¡ficas del tipo pie() usando matplotlib

import matplotlib.pyplot as plt
plt.figure(0)
labels = 'pa', 'pc', 'pg', 'pt'
sizes = prob_old
colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']

plt.pie(sizes, labels=labels, colors=colors,
autopct='%1.1f%%', shadow=True, startangle=140)
plt.axis('equal')
plt.title('old_dna')
plt.savefig('ModMul1_old.png',format = 'png')

plt.figure(1)
labels = 'pa', 'pc', 'pg', 'pt'
sizes = prob_new
colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']
plt.pie(sizes, labels=labels, colors=colors,
autopct='%1.1f%%', shadow=True, startangle=140)
plt.axis('equal')
plt.title('new_dna')
plt.savefig('ModMul1_new.png',format = 'png')

plt.show()

# EJERCICIO 1.3
# Escribimos una funciÃ³n que proporcionÃ¡ndo los nucleÃ³tidos, la longitud que 
# queremos y el modelo multinomial, nos devuelva una secuencia aleatoria que 
# se encuentre definida por esos parÃ¡metros. Esta funciÃ³n se va a llamar 
# secModeloMultinomial(mm,cuantos,nn)

def secModeloMultinomial(mm = [0.25,0.25,0.25,0.25],
                         cuantos = 100,
                         nn = ['A','C','G','T']):
    import numpy as np
    sec = np.random.choice(nn,
                           size = cuantos,
                           replace = True,
                           p = mm)
    return(sec)

# Ahora comprobamos que nuestra funciÃ³n realmente funciona:

secModeloMultinomial(mm=[0.9,0.1], cuantos = 100, nn=['C','G'])
secModeloMultinomial(mm = [0.10,0.80,0.05,0.05],cuantos = 100)

############################### EJERCICIO 2 ###################################
# EJERCICIO 2.1
# Vamos a hacer lo mismo que en el ejercicio, pero con la secuencia traducida
# a aminoÃ¡cidos:

old_aa = old_dna.translate()

# Sin embargo, vamos a reescribir la funciÃ³n que nos proporciona el modelo 
# multinomial, porque tenemos mÃ¡s elementos. Para poder contarlos, vamos a usar
# una funciÃ³n de python que se encuentra en el paquete de "collections". Esta 
# funciÃ³n nos cuenta todos los elementos y  nos devuelve un diccionario con 
# el nÃºmero de apariciones de dicho elemento en la secuencia. 

def ModeloMultinomial_general(seq):
     from collections import Counter
     count = Counter(seq)
     num = list(count.values())
     keys = list(count.keys())
     freq = []
     for i in range(0,len(num)):
         f = num[i]
         freq.append(f/len(seq))
    
     mm = dict(zip(keys,freq))
     return(mm)
     
mm_old = ModeloMultinomial_general(old_aa)

# Dibujamos un diagrama de sectores con el modelo multinomial de la secuencia:

import matplotlib.pyplot as plt

labels = list(mm_old.keys())
sizes = list(mm_old.values())

plt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=140)
plt.axis('equal')
plt.title('Modelo Multinomial old_aa')
plt.savefig('ModMul_old_aa.png',format = 'png')

plt.show()
        

# EJERCICIO 2.2
# Repetimos el apartado 1.2, pero cn la secuencia en aminoÃ¡cidos. Primero, vamos
# a hacer una secuencia que tenga el mismo modelo multinomial que old_aa que
# llamaremos new_aa:

mm_new = list(mm_old.values())
nn_new = list(mm_old.keys())


new_aa = secModeloMultinomial(mm = mm_new, cuantos = len(old_aa), 
                              nn = nn_new)
# Calculamos su modelo multinomial usando la funciÃ³n previamente escrita para
# ver si hay aguna diferencia:

mm_new = ModeloMultinomial_general(new_aa)

# Dibujamos ambos diagramas de sectores con los modelos multinomiales de cada
# uno como hicimos en el apartado 1.2

import matplotlib.pyplot as plt
plt.figure(0)
labels = list(mm_old.keys())
sizes = list(mm_old.values())

plt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=140)
plt.axis('equal')
plt.title('Modelo Multinomial old_aa')
plt.savefig('ModMul_old_aa.png',format = 'png')

plt.figure(1)
labels = list(mm_new.keys())
sizes = list(mm_new.values())
plt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=140)
plt.axis('equal')
plt.title('Modelo Multinomial new_aa')
plt.savefig('ModMul_new_aa.png',format = 'png')

plt.show()
    
################################# EJERCICIO 3 #################################  
# Descargamos la secuencia completa del Enterovirus D68 (AC: KX957761.1) y
# su genoma anotado en formato aminoÃ¡cidos y las guardamos en las variables
# nnn_enteno y aa_enteno, respectivamente:

from Bio import SeqIO ##Cargamos el paquete que nos permite leer los archivos
from Bio.Seq import Seq 

nnn_entero = SeqIO.read("D68_genome.fasta", "fasta")

aa_entero = SeqIO.read("D68_aa.fasta", "fasta")        
     
# EJERCICIO 3.2
# Vamos a escribir la funciÃ³n que nos permitirÃ¡ ver la composiciÃ³n de bases 
# local de una secuencia. Esta funciÃ³n se va a tener 4 argumentos principales:
# - La secuencia a estudiar
# - La longitud de la ventana que se quiere estudiar
# - El offset del estudio
# - Si la secuencia es o no es circular

def composicionBasesLocal(seq, window_len = 200, offset = 100, circular = False):
    lowest = 0
    highest = window_len
    res = []
    
    while highest<=len(seq)-1:
        window = seq[lowest:highest+1]
        mm = ModeloMultinomial(window)
        res.append(mm[1])
        
        lowest = lowest + offset
        highest = highest + offset
    
    if circular == True:
       while lowest <= len(seq)-1:
            window = seq[lowest:highest+1]
            cir_window = [i%len(seq) for i in range(len(window))]
            mm = ModeloMultinomial(cir_window)
            res.append(mm[1])
            
            lowest = lowest + offset
            highest = highest + offset
    
    return(res)
    

# Calculamos la composicion de bases local con las siguientes caracterÃ­sticas:

window_20 = composicionBasesLocal(nnn_entero.seq, 20, 20, True)

window_50 = composicionBasesLocal(nnn_entero.seq, 50, 20, True)

window_100 = composicionBasesLocal(nnn_entero.seq, 100, 20, True) 

# Para poder representarlos, tenemos que separar por elementos qu componen cada
# sublista. Para ello, definimos la siguiente funciÃ³n, que nos va a poder 
# permitir seleccionar el elemento que queramos de todas las sublistas 

def elemWindow (window, elem):
    selec = []
    i = 0
    while i <= len(window)-1: 
        temp = window[i]
        sub = temp[0]
        selec.append(sub[elem])
        i = i+1
    
    return(selec)
        
elem_20_a = elemWindow(window_20, 0)
elem_20_c = elemWindow(window_20, 1)
elem_20_g = elemWindow(window_20, 2)
elem_20_t = elemWindow(window_20, 3)

# Ahora representamos los resultados y observamos las diferencias entre ellos:
import matplotlib.pyplot as plt

x = range(len(elem_20_a))

plt.plot(x, elem_20_a, color = 'blue')
plt.plot(x, elem_20_c, color = 'red')
plt.plot(x, elem_20_g, color = 'orange')
plt.plot(x, elem_20_t, color = 'green')

plt.savefig('P6_3_2.png', format = 'png')
plt.show()

# El procedimiento serÃ­a el mismo para los otros dos resultados (window_50 
# y window_100)
    
# EJERCICIO 3.3
# Vamos a repetir el apartado anterior, pero en este caso vamos a cambiar el 
# bucle while() de la funciÃ³n composicionBasesLocal() por un bucle for(). A 
# esta nueva funciÃ³n la vamos a llamar composicionBasesLocalFor()

def composicionBasesLocalFor(seq, window_len = 200, 
                             offset = 100, circular = False):
    lowest = 0
    highest = window_len
    res = []
    
    for lowest in range(len(seq)):
        window = seq[lowest:highest+1]
        if lowest <= len(seq)-1:
            mm = ModeloMultinomial(window)
            res.append(mm[1])
            lowest = lowest + offset
            highest = highest + offset
        
        if circular == True:
            window = seq[lowest:highest+1]
            cir_window = [i%len(seq) for i in range(len(seq))]
            if lowest<= len(seq)-1:
                mm = ModeloMultinomial(cir_window)
                res.append(mm)
                lowest = lowest+offset
                highest = highest+offset
    
    return(res)
        

# Calculamos la composiciÃ³n de bases local usando el bucle for()
# para una ventana de tamaÃ±o 20, 50 y 100 y representamos la 
# composiciÃ³n en tres figuras:
    
window_20_for = composicionBasesLocalFor(nnn_entero.seq, 20, 20)

window_50_for = composicionBasesLocalFor(nnn_entero.seq, 50, 20)

window_100_for = composicionBasesLocalFor(nnn_entero.seq, 100, 20)

# RepresentaciÃ³n (mismo procedimeinto que en el partado 3.2)

elem_50_a = elemWindow(window_50_for, 0)
elem_50_c = elemWindow(window_50_for, 1)
elem_50_g = elemWindow(window_50_for, 2)
elem_50_t = elemWindow(window_50_for, 3)

import matplotlib.pyplot as plt

# window_20
x = range(len(elem_50_a))

plt.plot(x, elem_50_a, color = 'blue')
plt.plot(x, elem_50_c, color = 'red')
plt.plot(x, elem_50_g, color = 'orange')
plt.plot(x, elem_50_t, color = 'green')
plt.title('ComposiciÃ³n de Bases Local de nnn_entero')
plt.savefig('P6_3_3.png', format = 'png')
plt.show()

 
  
    
############################## EJERCICIO 4 ####################################  
# EJERCICIO 4.2
# Repetimos el procedimiento del ejercicio anterior, pero esta vez calculamos
# la composiciÃ³n de aminoÃ¡cidos local. El resultado serÃ¡ una lista de listas 
# donde cada una de ellas tendrÃ¡ 20 elementos (correspondiente a los aminoÃ¡cidos)
# Modificamos la funciÃ³n composicionBasesLocal() para hacer otra funciÃ³n que
# se llamarÃ¡ composicionAALocal() que tendÅ•a los mismos argumentos que
# la anterior:

def composicionAALocal(seq, window_len = 200, offset = 100, circular = False):
    lowest = 0
    highest = window_len
    res = []
    
    while highest<=len(seq)-1:
        window = seq[lowest:highest+1]
        mm = ModeloMultinomial_general(window)
        res.append(mm)
        
        lowest = lowest + offset
        highest = highest + offset
    
    if circular == True:
       while lowest <= len(seq)-1:
            window = seq[lowest:highest+1]
            cir_window = [i%len(seq) for i in range(len(window))]
            mm = ModeloMultinomial_general(cir_window)
            res.append(mm)
            
            lowest = lowest + offset
            highest = highest + offset
    
    return(res)    


# Calculamos la composiciÃ³n de aminoÃ¡cidos local con los siguientes argumentos:  
aa_window_20 = composicionAALocal(aa_entero.seq, 20, 20, circular = True)
aa_window_50 = composicionAALocal(aa_entero.seq, 50, 20, circular = True)
aa_window_100 = composicionAALocal(aa_entero.seq, 100, 20, circular = True)


# EJERCICIO 4.3
# Repetimos el procedimiento del apartado 3.2, pero esta vez calculamos la 
# composiciÃ³n de aminoÃ¡cidos:

def composicionAALocalFor(seq, window_len = 200, 
                             offset = 100, circular = False):
    lowest = 0
    highest = window_len
    res = []
    
    for lowest in range(len(seq)):
        window = seq[lowest:highest+1]
        if lowest <= len(seq)-1:
            mm = ModeloMultinomial_general(window)
            res.append(mm)
            lowest = lowest + offset
            highest = highest + offset
        
        if circular == True:
            window = seq[lowest:highest+1]
            cir_window = [i%len(seq) for i in range(len(seq))]
            if lowest<= len(seq)-1:
                mm = ModeloMultinomial_general(cir_window)
                res.append(mm)
                lowest = lowest+offset
                highest = highest+offset
    
    return(res)
        

# Calculamos la composiciÃ³n de bases local usando el bucle for()
# para una ventana de tamaÃ±o 20, 50 y 100 y representamos la 
# composiciÃ³n en tres figuras:
    
aa_window_20_for = composicionAALocalFor(aa_entero.seq, 20, 20)

aa_window_50_for = composicionAALocalFor(aa_entero.seq, 50, 20)

aa_window_100_for = composicionAALocalFor(aa_entero.seq, 100, 20)











